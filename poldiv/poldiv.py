"""poldiv dataset."""

import tensorflow_datasets as tfds
import tensorflow as tf
import tifffile as tiff
import os
import re

_DESCRIPTION = """The poldiv dataset contains IFC-measured pollen samples from 2019, 2020 and REF in 100 classes. The 
images are R3/R4-gated and depict single in-focus, non-cropped cells (R4) or cells/multiple cells of the same species 
of poor quality that are cropped or polluted (R3). The dataset yields the individual multispectral channels and their 
corresponding default masks that are generated by the Amnis ImageStream Mk II as separate 16-bit images with varying 
width and height."""

# TODO(poldiv): BibTeX citation
_CITATION = """
"""

_DATASET = "dataset-2019_2020_REF-20210226.tar.gz"


class Poldiv(tfds.core.GeneratorBasedBuilder):

  MANUAL_DOWNLOAD_INSTRUCTIONS = """
    Place the dataset tar.gz file in the `~/tensorflow_datasets/downloads/manual` dir.
    """

  """DatasetBuilder for poldiv dataset."""

  VERSION = tfds.core.Version('0.1.0')
  RELEASE_NOTES = {
      '0.1.0': 'Initial release.',
  }

  def _info(self) -> tfds.core.DatasetInfo:
    """Returns the dataset metadata."""

    channels = {f'C{i+1:02}': tfds.features.Image(dtype=tf.uint16, shape=(None, None, 1)) for i in range(12)}
    masks = {f'M{i+1:02}': tfds.features.Image(dtype=tf.uint16, shape=(None, None, 1)) for i in range(12)}
    features = {**channels, **masks,
                'label': tfds.features.ClassLabel(names_file='./classes.txt'),
                'filename': tfds.features.Text()}

    return tfds.core.DatasetInfo(
        builder=self,
        description=_DESCRIPTION,
        features=tfds.features.FeaturesDict(features),
        supervised_keys=None,
        homepage='https://dataset-homepage/',
        citation=_CITATION,
    )

  def _split_generators(self, dl_manager: tfds.download.DownloadManager):
    """Returns SplitGenerators."""
    path = os.path.join(dl_manager.manual_dir, _DATASET)

    if not tf.io.gfile.exists(path):
      raise AssertionError(f'You must download the dataset .tar.gz file and place it into {dl_manager.manual_dir}')

    path_iter = dl_manager.iter_archive(path)

    return {
        'train': self._generate_examples(path_iter),
    }

  def _generate_examples(self, path_iter):
    """Yields examples."""

    for filename, fobj in path_iter:
      label = os.path.basename(os.path.dirname(filename))
      img = tiff.imread(fobj)
      num = re.search(r'(\d{6})\.tif', filename).group(1)

      channels = {f'C{i+1:02}': img[:, :, i:i+1] for i in range(0, 12)}
      masks = {f'M{i-11:02}': img[:, :, i:i+1] for i in range(12, 24)}
      features = {**channels, **masks, 'label': label, 'filename': filename.split('/')[1]}

      yield f'{label}_{num}', features
