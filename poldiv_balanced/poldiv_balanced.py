"""poldiv_balanced dataset."""

import tensorflow_datasets as tfds
import tensorflow as tf
import tifffile as tiff
import csv
import os
import re

_DESCRIPTION = """The poldiv_balanced dataset contains IFC-measured pollen samples from 2018, 2019, 2020 and REF in 12 
classes. The images are R3/R4-gated and depict single in-focus, non-cropped cells (R4) or cells/multiple cells of the 
same species of poor quality that are cropped or polluted (R3). The dataset yields the individual multispectral 
channels and their corresponding default masks that are generated by the Amnis ImageStream Mk II as separate 16-bit 
images with varying width and height."""

# TODO(poldiv_balanced): BibTeX citation
_CITATION = """
"""

_DATASET = "poldiv-dataset-balanced-3.0.0.tar.gz"


class PoldivBalanced(tfds.core.GeneratorBasedBuilder):
    """DatasetBuilder for poldiv_balanced dataset."""

    VERSION = tfds.core.Version('3.0.0')
    RELEASE_NOTES = {
        '3.0.0': 'Initial release.',
    }

    MANUAL_DOWNLOAD_INSTRUCTIONS = """
        Place the dataset tar.gz file in the `~/tensorflow_datasets/downloads/manual` dir.
        """

    def _info(self) -> tfds.core.DatasetInfo:
        """Returns the dataset metadata."""

        channels = {str(i + 1): tfds.features.Tensor(dtype=tf.uint16, shape=(None, None), encoding='zlib') for i in
                    range(6)}
        channels['9'] = tfds.features.Tensor(dtype=tf.uint16, shape=(None, None), encoding='zlib')
        masks = {str(i + 1): tfds.features.Tensor(dtype=tf.uint16, shape=(None, None), encoding='zlib') for i in
                 range(6)}
        masks['9'] = tfds.features.Tensor(dtype=tf.uint16, shape=(None, None), encoding='zlib')

        features = {'channels': {**channels},
                    'masks': {**masks},
                    'filename': tf.string,
                    'species': tfds.features.ClassLabel(
                        names_file=f'poldiv_balanced/classes-species.txt'),
                    'genus': tfds.features.ClassLabel(
                        names_file=f'poldiv_balanced/classes-genus.txt')}

        return tfds.core.DatasetInfo(
            builder=self,
            description=_DESCRIPTION,
            features=tfds.features.FeaturesDict(features),
            supervised_keys=None,
            homepage='https://github.com/lahr/icyt-tfds',
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager: tfds.download.DownloadManager):
        """Returns SplitGenerators."""

        path = os.path.join(dl_manager.manual_dir, _DATASET)

        if not tf.io.gfile.exists(path):
            raise AssertionError(
                f'You must download the dataset .tar.gz file and place it into {dl_manager.manual_dir}')

        return {
            'train': self._generate_examples(dl_manager.iter_archive(path), 'train'),
            'valid': self._generate_examples(dl_manager.iter_archive(path), 'valid'),
            'test': self._generate_examples(dl_manager.iter_archive(path), 'test')
        }

    def _generate_examples(self, path_iter, split_name):
        """Yields examples."""

        path_regex = r'^(?:([^/\n.A-Z]+)/)?([a-zA-Z]+\.?[a-zA-Z]+).*$'

        mapping_reader = csv.DictReader(open('poldiv_balanced/mapping-species-genus.csv'),
                                        fieldnames=['species', 'genus'])
        mappings = list(mapping_reader)

        for filename, fobj in path_iter:
            assert filename is not None
            assert fobj is not None

            m = re.match(path_regex, filename)

            if m.group(1) != split_name:
                continue

            species = m.group(2).lower()

            if species == 'others':
                continue

            mapping_result = next((item for item in mappings if item['species'] == species), None)
            assert mapping_result is not None, f'Genus not found for {species}'
            genus = mapping_result['genus']

            img = tiff.imread(fobj)
            num_channels = img.shape[-1] / 2  # for 2018 there are 7, 9 or 12 channels

            if num_channels == 7 or num_channels == 9:
                channels = {str(i + 1): img[:, :, i] for i in range(0, 6)}
                channels['9'] = img[:, :, 6]
                masks = {str(i - 6): img[:, :, i] for i in range(7, 13)}
                masks['9'] = img[:, :, 13]

            elif num_channels == 12:
                channels = {str(i + 1): img[:, :, i] for i in range(0, 6)}
                channels['9'] = img[:, :, 8]
                masks = {str(i - 11): img[:, :, i] for i in range(12, 18)}
                masks['9'] = img[:, :, 20]

            else:
                raise AssertionError(f'Unknown number of channels ({num_channels}) for file {filename}')

            features = {
                'channels': {**channels},
                'masks': {**masks},
                'filename': filename,
                'species': species,
                'genus': genus}

            yield filename, features
